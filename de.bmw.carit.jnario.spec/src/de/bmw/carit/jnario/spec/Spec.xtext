grammar de.bmw.carit.jnario.spec.Spec with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/Xtend2" as xtend2

generate spec "http://www.bmw.de/carit/jnario/spec/Spec"

SpecFile:
{SpecFile}
('package' packageName=QualifiedName)? 
	imports+=Import*
	elements+=ExampleGroup*
;

Import returns xtend2::XtendImport: 
	'import' (
		(static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*') | 
		importedType=[types::JvmType|QualifiedName] | 
		importedNamespace=QualifiedNameWithWildCard
	)
;
 
QualifiedNameWithWildCard :
	QualifiedName  '.' '*';

ExampleGroup: 
	{ExampleGroup}
	annotations+=XAnnotation* 
	preamble=('describe') target=[types::JvmIdentifiableElement|QualifiedName]? name=STRING? '{'
       (elements+=Member*)
'}'
;

Member :
	{Member} annotations+=XAnnotation* 
	(
		{Field.annotationInfo = current}	
		 	(type=JvmTypeReference name=ValidID (=> '=' right=XExpression)?)
		
	|	{Example.annotationInfo = current}
		(preamble='it' feature=[types::JvmIdentifiableElement|ValidID]? name=STRING? 
			body=XBlockExpression?)
	|	{ExampleGroup.annotationInfo = current}
			(preamble=('describe'|'context') target=[types::JvmIdentifiableElement|QualifiedName]? name=STRING? '{'
      	elements+=Member*
      	'}')
     |	{Function.annotationInfo = current}
			('def' 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			(=>(returnType=JvmTypeReference name=ValidID '(')
			| (name=ValidID '('))
			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			expression=XBlockExpression)
	 );

Parameter:
	annotations+=XAnnotation* 
	parameterType=JvmTypeReference name=ValidID;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";

