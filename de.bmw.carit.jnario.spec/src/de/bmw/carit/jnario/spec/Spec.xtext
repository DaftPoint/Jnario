grammar de.bmw.carit.jnario.spec.Spec with org.eclipse.xtext.xtend2.Xtend2

import "http://www.bmw.de/carit/jnario/spec/Spec" 
import "http://www.eclipse.org/xtext/Xtend2" as xtend
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "platform:/resource/de.bmw.carit.jnario.common/model/Common.ecore"
 
SpecFile returns xtend::XtendFile:
{SpecFile}
('package' package=QualifiedName)? 
	imports+=Import*
	xtendClass=ExampleGroup
;

ExampleGroup returns xtend::XtendClass:  
	{ExampleGroup}
	annotations+=XAnnotation* 
	preamble=('describe') targetType=[types::JvmDeclaredType|QualifiedName]? name=STRING? '{'
       (members+=Member*)
'}'
;

Method:
	ID ('(' (TypeName (',' TypeName)*)? ')')?  
;

TypeName:
	ID ('<' TypeRef (',' TypeRef)* '>')? ('[]')?
;

TypeRef:
	('?')? ('extends' | 'super')?  TypeName
;

Member returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation* 
	(
		
		{Example.annotationInfo = current}
		(preamble='it' ('throws' exception=[types::JvmDeclaredType|QualifiedName])? name=STRING
			body=XBlockExpression?)
	|	{ExampleGroup.annotationInfo = current}
			(preamble=('describe') targetType=[types::JvmDeclaredType|QualifiedName]? name=STRING? '{'
      		members+=Member*
      	'}')
    |	{Before.annotationInfo = current}
		('before' (beforeAll?='all')? name=(STRING | ID)?
			body=XBlockExpression?)
	|	{After.annotationInfo = current}
		('after' (afterAll?='all')? name=(STRING | ID)?
			body=XBlockExpression?)
    |	{ExampleGroup.annotationInfo = current}
			(preamble=('context') targetOperation=[types::JvmOperation|Method]? name=STRING? '{'
      		members+=Member*
      	'}')
	|	{ExampleTable.annotationInfo = current} ('example' name=STRING? '{'
			(heading = ExampleHeading
			(rows += ExampleRow)*)?
      	'}') 
	|	{xtend::XtendField.annotationInfo = current}	
		 	(extension?='extension' type=JvmTypeReference name=ID?
			| static?='static'? type=JvmTypeReference name=ID)
			('=' initialValue=XExpression)?
		
	|	{xtend::XtendFunction.annotationInfo = current}
			('def' | override?='override') static?='static'? (dispatch?='dispatch'?) 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			( =>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ID '(')
			| =>(returnType=JvmTypeReference name=ID '(')
			| =>(createExtensionInfo=CreateExtensionInfo name=ID '(')
			| name=ID '('
			)
			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			(expression=XBlockExpression)?
	 );
	 
XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	XAssert;


XAssert returns xbase::XExpression: 
	{Assertion}
	'assert' expression=XExpression;


ExampleHeading: 
	'|' {ExampleHeading} (parts+=ExampleHeadingCell )*
;

ExampleHeadingCell returns xtend::XtendField:
	type=JvmTypeReference? name=ValidID '|';

ExampleRow: 
	'|' {ExampleRow} (parts+=XExpression '|')*
;

