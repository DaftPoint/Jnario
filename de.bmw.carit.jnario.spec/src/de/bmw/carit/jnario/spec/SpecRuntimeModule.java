/*
 * generated by Xtext
 */
package de.bmw.carit.jnario.spec;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.generator.OutputConfigurationProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.EObjectAtOffsetHelper;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.JvmModelAssociator;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.scoping.featurecalls.StaticImplicitMethodsFeatureForTypeProvider.ExtensionClassNameProvider;
import org.eclipse.xtext.xbase.typing.ITypeArgumentContextHelper;
import org.eclipse.xtext.xbase.typing.ITypeProvider;
import org.eclipse.xtext.xbase.validation.EarlyExitValidator;
import org.eclipse.xtext.xtend2.compiler.Xtend2OutputConfigurationProvider;
import org.eclipse.xtext.xtend2.conversion.Xtend2ValueConverterService;
import org.eclipse.xtext.xtend2.featurecalls.Xtend2IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xtend2.jvmmodel.DispatchUtil;
import org.eclipse.xtext.xtend2.jvmmodel.IXtend2JvmAssociations;
import org.eclipse.xtext.xtend2.naming.Xtend2QualifiedNameProvider;
import org.eclipse.xtext.xtend2.resource.Xtend2Resource;
import org.eclipse.xtext.xtend2.resource.Xtend2ResourceDescriptionStrategy;
import org.eclipse.xtext.xtend2.resource.XtendEObjectAtOffsetHelper;
import org.eclipse.xtext.xtend2.scoping.Xtend2ImportedNamespaceScopeProvider;
import org.eclipse.xtext.xtend2.validation.XtendEarlyExitValidator;

import com.google.inject.Binder;
import com.google.inject.name.Names;

import de.bmw.carit.jnario.common.jvmmodel.ExtendedJvmModelGenerator;
import de.bmw.carit.jnario.common.jvmmodel.ExtendedJvmTypesBuilder;
import de.bmw.carit.jnario.common.scoping.JnarioExtensionClassNameProvider;
import de.bmw.carit.jnario.spec.compiler.SpecCompiler;
import de.bmw.carit.jnario.spec.conversion.SpecValueConverterService;
import de.bmw.carit.jnario.spec.jvmmodel.JnarioDispatchUtil;
import de.bmw.carit.jnario.spec.jvmmodel.SpecJvmModelInferrer;
import de.bmw.carit.jnario.spec.scoping.SpecScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class SpecRuntimeModule extends de.bmw.carit.jnario.spec.AbstractSpecRuntimeModule {

	public Class<? extends DispatchUtil> bindDispatchUtil(){
		return JnarioDispatchUtil.class;
	}
	
	public Class<? extends JvmTypesBuilder> bindJvmTypesBuilder(){
		return ExtendedJvmTypesBuilder.class;
	}
	
	public Class<? extends JvmModelGenerator> bindJvmModelGenerator(){
		return ExtendedJvmModelGenerator.class;
	}
	
	@Override
	public java.lang.Class<? extends IScopeProvider> bindIScopeProvider() {
		return SpecScopeProvider.class;
	}
	

	public Class<? extends ExtensionClassNameProvider> bindExtensionClassNameProvider(){
		return JnarioExtensionClassNameProvider.class;
	}
	
	@Override
	public Class<? extends ITypeProvider> bindITypeProvider() {
		return SpecTypeProvider.class;
	}
	
	public Class<? extends ITypeArgumentContextHelper> bindITypeArgumentContextHelper(){
		return SpecTypeProvider.class;
	}
	
	
	@Override
	public Class<? extends XtextResource> bindXtextResource() {
		return Xtend2Resource.class;
	}
	
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return SpecValueConverterService.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
		.to(Xtend2ImportedNamespaceScopeProvider.class);
	}

	@Override
	public Class<? extends IdentifiableSimpleNameProvider> bindIdentifiableSimpleNameProvider() {
		return Xtend2IdentifiableSimpleNameProvider.class;
	}

	public Class<? extends IJvmModelInferrer> bindIJvmModelInferrer() {
		return SpecJvmModelInferrer.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return Xtend2QualifiedNameProvider.class;
	}
	
	public Class <? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return Xtend2ResourceDescriptionStrategy.class;
	}

	public Class<? extends JvmModelAssociator> bindJvmModelAssociator() {
		return IXtend2JvmAssociations.Impl.class;
	}

	public Class<? extends EarlyExitValidator> bindEarlyExitValidator() {
		return XtendEarlyExitValidator.class;
	}
	
	@Override
	public Class<? extends EObjectAtOffsetHelper> bindEObjectAtOffsetHelper() {
		return XtendEObjectAtOffsetHelper.class;
	}
	
	public Class<? extends OutputConfigurationProvider> bindOutputConfigurationProvider() {
		return Xtend2OutputConfigurationProvider.class;
	}
	
	public Class<? extends XbaseCompiler> bindXbaseCompiler(){
		return SpecCompiler.class;
	}
	
}
