/*
* generated by Xtext
*/

package de.bmw.carit.jnario.spec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageNameAssignment_1_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsExampleGroupParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//SpecFile:
		//	{SpecFile} ("package" packageName=QualifiedName)? imports+=Import* elements+=ExampleGroup*;
		public ParserRule getRule() { return rule; }

		//{SpecFile} ("package" packageName=QualifiedName)? imports+=Import* elements+=ExampleGroup*
		public Group getGroup() { return cGroup; }

		//{SpecFile}
		public Action getSpecFileAction_0() { return cSpecFileAction_0; }

		//("package" packageName=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//"package"
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1_1() { return cPackageNameAssignment_1_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//elements+=ExampleGroup*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ExampleGroup
		public RuleCall getElementsExampleGroupParserRuleCall_3_0() { return cElementsExampleGroupParserRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0_0 = (Keyword)cStaticAssignment_1_0_0.eContents().get(0);
		private final Assignment cExtensionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExtensionExtensionKeyword_1_0_1_0 = (Keyword)cExtensionAssignment_1_0_1.eContents().get(0);
		private final Assignment cImportedTypeAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cImportedTypeJvmTypeCrossReference_1_0_2_0 = (CrossReference)cImportedTypeAssignment_1_0_2.eContents().get(0);
		private final RuleCall cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1 = (RuleCall)cImportedTypeJvmTypeCrossReference_1_0_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cImportedTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cImportedTypeJvmTypeCrossReference_1_1_0 = (CrossReference)cImportedTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cImportedTypeJvmTypeCrossReference_1_1_0.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_2_0 = (RuleCall)cImportedNamespaceAssignment_1_2.eContents().get(0);
		
		//Import returns xtend2::XtendImport:
		//	"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
		//	importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard);
		public ParserRule getRule() { return rule; }

		//"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
		//importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard)
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
		//importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//static?="static"
		public Assignment getStaticAssignment_1_0_0() { return cStaticAssignment_1_0_0; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_0_0() { return cStaticStaticKeyword_1_0_0_0; }

		//extension?="extension"?
		public Assignment getExtensionAssignment_1_0_1() { return cExtensionAssignment_1_0_1; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_1_0_1_0() { return cExtensionExtensionKeyword_1_0_1_0; }

		//importedType=[types::JvmType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_0_2() { return cImportedTypeAssignment_1_0_2; }

		//[types::JvmType|QualifiedName]
		public CrossReference getImportedTypeJvmTypeCrossReference_1_0_2_0() { return cImportedTypeJvmTypeCrossReference_1_0_2_0; }

		//QualifiedName
		public RuleCall getImportedTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1() { return cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_3() { return cFullStopKeyword_1_0_3; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_4() { return cAsteriskKeyword_1_0_4; }

		//importedType=[types::JvmType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_1() { return cImportedTypeAssignment_1_1; }

		//[types::JvmType|QualifiedName]
		public CrossReference getImportedTypeJvmTypeCrossReference_1_1_0() { return cImportedTypeJvmTypeCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getImportedTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1() { return cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1_2() { return cImportedNamespaceAssignment_1_2; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_2_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_2_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName "." "*";
		public ParserRule getRule() { return rule; }

		//QualifiedName "." "*"
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class ExampleGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExampleGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExampleGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cPreambleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPreambleDescribeKeyword_2_0 = (Keyword)cPreambleAssignment_2.eContents().get(0);
		private final Assignment cTargetTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetTypeJvmDeclaredTypeCrossReference_3_0 = (CrossReference)cTargetTypeAssignment_3.eContents().get(0);
		private final RuleCall cTargetTypeJvmDeclaredTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTargetTypeJvmDeclaredTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsMemberParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExampleGroup:
		//	{ExampleGroup} annotations+=XAnnotation* preamble="describe" targetType=[types::JvmDeclaredType|QualifiedName]?
		//	name=STRING? "{" elements+=Member* "}";
		public ParserRule getRule() { return rule; }

		//{ExampleGroup} annotations+=XAnnotation* preamble="describe" targetType=[types::JvmDeclaredType|QualifiedName]?
		//name=STRING? "{" elements+=Member* "}"
		public Group getGroup() { return cGroup; }

		//{ExampleGroup}
		public Action getExampleGroupAction_0() { return cExampleGroupAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//preamble="describe"
		public Assignment getPreambleAssignment_2() { return cPreambleAssignment_2; }

		//"describe"
		public Keyword getPreambleDescribeKeyword_2_0() { return cPreambleDescribeKeyword_2_0; }

		//targetType=[types::JvmDeclaredType|QualifiedName]?
		public Assignment getTargetTypeAssignment_3() { return cTargetTypeAssignment_3; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getTargetTypeJvmDeclaredTypeCrossReference_3_0() { return cTargetTypeJvmDeclaredTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTargetTypeJvmDeclaredTypeQualifiedNameParserRuleCall_3_0_1() { return cTargetTypeJvmDeclaredTypeQualifiedNameParserRuleCall_3_0_1; }

		//name=STRING?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=Member*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//Member
		public RuleCall getElementsMemberParserRuleCall_6_0() { return cElementsMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_2_1_1_1 = (RuleCall)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Method:
		//	"#" ValidID ("(" (TypeName ("," TypeName)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//"#" ValidID ("(" (TypeName ("," TypeName)*)? ")")?
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1() { return cValidIDParserRuleCall_1; }

		//("(" (TypeName ("," TypeName)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(TypeName ("," TypeName)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_2_1_0() { return cTypeNameParserRuleCall_2_1_0; }

		//("," TypeName)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_2_1_1_1() { return cTypeNameParserRuleCall_2_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeRefParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cTypeRefParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeName:
		//	ValidID ("<" TypeRef ("," TypeRef)* ">")? "[]"?;
		public ParserRule getRule() { return rule; }

		//ValidID ("<" TypeRef ("," TypeRef)* ">")? "[]"?
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("<" TypeRef ("," TypeRef)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_1_1() { return cTypeRefParserRuleCall_1_1; }

		//("," TypeRef)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_1_2_1() { return cTypeRefParserRuleCall_1_2_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2() { return cLeftSquareBracketRightSquareBracketKeyword_2; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSuperKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TypeRef:
		//	"?"? ("extends" | "super")? TypeName;
		public ParserRule getRule() { return rule; }

		//"?"? ("extends" | "super")? TypeName
		public Group getGroup() { return cGroup; }

		//"?"?
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//("extends" | "super")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//"super"
		public Keyword getSuperKeyword_1_1() { return cSuperKeyword_1_1; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_2() { return cTypeNameParserRuleCall_2; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cFieldAnnotationInfoAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_0_1_1_0 = (RuleCall)cNameAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_0_1_2 = (Group)cGroup_2_0_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0_1_2_0 = (Keyword)cGroup_2_0_1_2.eContents().get(0);
		private final Assignment cRightAssignment_2_0_1_2_1 = (Assignment)cGroup_2_0_1_2.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_2_0_1_2_1_0 = (RuleCall)cRightAssignment_2_0_1_2_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cExampleAnnotationInfoAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cPreambleAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final Keyword cPreambleItKeyword_2_1_1_0_0 = (Keyword)cPreambleAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Keyword cThrowsKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cExceptionAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final CrossReference cExceptionJvmDeclaredTypeCrossReference_2_1_1_1_1_0 = (CrossReference)cExceptionAssignment_2_1_1_1_1.eContents().get(0);
		private final RuleCall cExceptionJvmDeclaredTypeQualifiedNameParserRuleCall_2_1_1_1_1_0_1 = (RuleCall)cExceptionJvmDeclaredTypeCrossReference_2_1_1_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cNameAssignment_2_1_1_2.eContents().get(0);
		private final Assignment cBodyAssignment_2_1_1_3 = (Assignment)cGroup_2_1_1.eContents().get(3);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_2_1_1_3_0 = (RuleCall)cBodyAssignment_2_1_1_3.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Action cExampleGroupAnnotationInfoAction_2_2_0 = (Action)cGroup_2_2.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Assignment cPreambleAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final Alternatives cPreambleAlternatives_2_2_1_0_0 = (Alternatives)cPreambleAssignment_2_2_1_0.eContents().get(0);
		private final Keyword cPreambleDescribeKeyword_2_2_1_0_0_0 = (Keyword)cPreambleAlternatives_2_2_1_0_0.eContents().get(0);
		private final Keyword cPreambleContextKeyword_2_2_1_0_0_1 = (Keyword)cPreambleAlternatives_2_2_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_2_1_1 = (Alternatives)cGroup_2_2_1.eContents().get(1);
		private final Assignment cTargetTypeAssignment_2_2_1_1_0 = (Assignment)cAlternatives_2_2_1_1.eContents().get(0);
		private final CrossReference cTargetTypeJvmDeclaredTypeCrossReference_2_2_1_1_0_0 = (CrossReference)cTargetTypeAssignment_2_2_1_1_0.eContents().get(0);
		private final RuleCall cTargetTypeJvmDeclaredTypeQualifiedNameParserRuleCall_2_2_1_1_0_0_1 = (RuleCall)cTargetTypeJvmDeclaredTypeCrossReference_2_2_1_1_0_0.eContents().get(1);
		private final Assignment cTargetOperationAssignment_2_2_1_1_1 = (Assignment)cAlternatives_2_2_1_1.eContents().get(1);
		private final CrossReference cTargetOperationJvmOperationCrossReference_2_2_1_1_1_0 = (CrossReference)cTargetOperationAssignment_2_2_1_1_1.eContents().get(0);
		private final RuleCall cTargetOperationJvmOperationMethodParserRuleCall_2_2_1_1_1_0_1 = (RuleCall)cTargetOperationJvmOperationCrossReference_2_2_1_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2_2_1_2 = (Assignment)cGroup_2_2_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_2_1_2_0 = (RuleCall)cNameAssignment_2_2_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_2_1_3 = (Keyword)cGroup_2_2_1.eContents().get(3);
		private final Assignment cElementsAssignment_2_2_1_4 = (Assignment)cGroup_2_2_1.eContents().get(4);
		private final RuleCall cElementsMemberParserRuleCall_2_2_1_4_0 = (RuleCall)cElementsAssignment_2_2_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2_1_5 = (Keyword)cGroup_2_2_1.eContents().get(5);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Action cFunctionAnnotationInfoAction_2_3_0 = (Action)cGroup_2_3.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cDefKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_1_1 = (Group)cGroup_2_3_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_3_1_1_0 = (Keyword)cGroup_2_3_1_1.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_3_1_1_1 = (Assignment)cGroup_2_3_1_1.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_3_1_1_1_0 = (RuleCall)cTypeParametersAssignment_2_3_1_1_1.eContents().get(0);
		private final Group cGroup_2_3_1_1_2 = (Group)cGroup_2_3_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_3_1_1_2_0 = (Keyword)cGroup_2_3_1_1_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_3_1_1_2_1 = (Assignment)cGroup_2_3_1_1_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_3_1_1_2_1_0 = (RuleCall)cTypeParametersAssignment_2_3_1_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3_1_1_3 = (Keyword)cGroup_2_3_1_1.eContents().get(3);
		private final Alternatives cAlternatives_2_3_1_2 = (Alternatives)cGroup_2_3_1.eContents().get(2);
		private final Group cGroup_2_3_1_2_0 = (Group)cAlternatives_2_3_1_2.eContents().get(0);
		private final Group cGroup_2_3_1_2_0_0 = (Group)cGroup_2_3_1_2_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_3_1_2_0_0_0 = (Assignment)cGroup_2_3_1_2_0_0.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_2_3_1_2_0_0_0_0 = (RuleCall)cReturnTypeAssignment_2_3_1_2_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_3_1_2_0_0_1 = (Assignment)cGroup_2_3_1_2_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_3_1_2_0_0_1_0 = (RuleCall)cNameAssignment_2_3_1_2_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_3_1_2_0_0_2 = (Keyword)cGroup_2_3_1_2_0_0.eContents().get(2);
		private final Group cGroup_2_3_1_2_1 = (Group)cAlternatives_2_3_1_2.eContents().get(1);
		private final Assignment cNameAssignment_2_3_1_2_1_0 = (Assignment)cGroup_2_3_1_2_1.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_3_1_2_1_0_0 = (RuleCall)cNameAssignment_2_3_1_2_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_3_1_2_1_1 = (Keyword)cGroup_2_3_1_2_1.eContents().get(1);
		private final Group cGroup_2_3_1_3 = (Group)cGroup_2_3_1.eContents().get(3);
		private final Assignment cParametersAssignment_2_3_1_3_0 = (Assignment)cGroup_2_3_1_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_3_1_3_0_0 = (RuleCall)cParametersAssignment_2_3_1_3_0.eContents().get(0);
		private final Group cGroup_2_3_1_3_1 = (Group)cGroup_2_3_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_3_1_0 = (Keyword)cGroup_2_3_1_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_3_1_3_1_1 = (Assignment)cGroup_2_3_1_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_3_1_3_1_1_0 = (RuleCall)cParametersAssignment_2_3_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_1_4 = (Keyword)cGroup_2_3_1.eContents().get(4);
		private final Assignment cExpressionAssignment_2_3_1_5 = (Assignment)cGroup_2_3_1.eContents().get(5);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_3_1_5_0 = (RuleCall)cExpressionAssignment_2_3_1_5.eContents().get(0);
		
		////XCastedExpression returns xbase::XExpression:
		//
		////	XInfixOperation (=>({xbase::XCastedExpression.target=current} 'as') type=JvmTypeReference)*
		//
		////;
		//
		////
		//
		////XInfixOperation returns xbase::XExpression:
		//
		////	XMemberFeatureCall  (=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ValidID]) rightOperand=XMemberFeatureCall)*
		//
		////;
		//
		//Member:
		//	{Member} annotations+=XAnnotation* ({Field.annotationInfo=current} (type=JvmTypeReference name=ValidID ("="
		//	right=XExpression)?) | {Example.annotationInfo=current} (preamble="it" ("throws"
		//	exception=[types::JvmDeclaredType|QualifiedName])? name=STRING body=XBlockExpression?) |
		//	{ExampleGroup.annotationInfo=current} (preamble=("describe" | "context")
		//	(targetType=[types::JvmDeclaredType|QualifiedName] | targetOperation=[types::JvmOperation|Method])? name=STRING? "{"
		//	elements+=Member* "}") | {Function.annotationInfo=current} ("def" ("<" typeParameters+=JvmTypeParameter (","
		//	typeParameters+=JvmTypeParameter)* ">")? (=> (returnType=JvmTypeReference name=ValidID "(") | name=ValidID "(")
		//	(parameters+=Parameter ("," parameters+=Parameter)*)? ")" expression=XBlockExpression));
		public ParserRule getRule() { return rule; }

		//{Member} annotations+=XAnnotation* ({Field.annotationInfo=current} (type=JvmTypeReference name=ValidID ("="
		//right=XExpression)?) | {Example.annotationInfo=current} (preamble="it" ("throws"
		//exception=[types::JvmDeclaredType|QualifiedName])? name=STRING body=XBlockExpression?) |
		//{ExampleGroup.annotationInfo=current} (preamble=("describe" | "context")
		//(targetType=[types::JvmDeclaredType|QualifiedName] | targetOperation=[types::JvmOperation|Method])? name=STRING? "{"
		//elements+=Member* "}") | {Function.annotationInfo=current} ("def" ("<" typeParameters+=JvmTypeParameter (","
		//typeParameters+=JvmTypeParameter)* ">")? (=> (returnType=JvmTypeReference name=ValidID "(") | name=ValidID "(")
		//(parameters+=Parameter ("," parameters+=Parameter)*)? ")" expression=XBlockExpression))
		public Group getGroup() { return cGroup; }

		//{Member}
		public Action getMemberAction_0() { return cMemberAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{Field.annotationInfo=current} (type=JvmTypeReference name=ValidID ("=" right=XExpression)?) |
		//{Example.annotationInfo=current} (preamble="it" ("throws" exception=[types::JvmDeclaredType|QualifiedName])?
		//name=STRING body=XBlockExpression?) | {ExampleGroup.annotationInfo=current} (preamble=("describe" | "context")
		//(targetType=[types::JvmDeclaredType|QualifiedName] | targetOperation=[types::JvmOperation|Method])? name=STRING? "{"
		//elements+=Member* "}") | {Function.annotationInfo=current} ("def" ("<" typeParameters+=JvmTypeParameter (","
		//typeParameters+=JvmTypeParameter)* ">")? (=> (returnType=JvmTypeReference name=ValidID "(") | name=ValidID "(")
		//(parameters+=Parameter ("," parameters+=Parameter)*)? ")" expression=XBlockExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//{Field.annotationInfo=current} (type=JvmTypeReference name=ValidID ("=" right=XExpression)?)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{Field.annotationInfo=current}
		public Action getFieldAnnotationInfoAction_2_0_0() { return cFieldAnnotationInfoAction_2_0_0; }

		//type=JvmTypeReference name=ValidID ("=" right=XExpression)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_1_0() { return cTypeAssignment_2_0_1_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_1_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_1_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_1_1() { return cNameAssignment_2_0_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_1_1_0() { return cNameValidIDParserRuleCall_2_0_1_1_0; }

		//(=> "=" right=XExpression)?
		public Group getGroup_2_0_1_2() { return cGroup_2_0_1_2; }

		//=> "="
		public Keyword getEqualsSignKeyword_2_0_1_2_0() { return cEqualsSignKeyword_2_0_1_2_0; }

		//right=XExpression
		public Assignment getRightAssignment_2_0_1_2_1() { return cRightAssignment_2_0_1_2_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_2_0_1_2_1_0() { return cRightXExpressionParserRuleCall_2_0_1_2_1_0; }

		//{Example.annotationInfo=current} (preamble="it" ("throws" exception=[types::JvmDeclaredType|QualifiedName])? name=STRING
		//body=XBlockExpression?)
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{Example.annotationInfo=current}
		public Action getExampleAnnotationInfoAction_2_1_0() { return cExampleAnnotationInfoAction_2_1_0; }

		//preamble="it" ("throws" exception=[types::JvmDeclaredType|QualifiedName])? name=STRING body=XBlockExpression?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//preamble="it"
		public Assignment getPreambleAssignment_2_1_1_0() { return cPreambleAssignment_2_1_1_0; }

		//"it"
		public Keyword getPreambleItKeyword_2_1_1_0_0() { return cPreambleItKeyword_2_1_1_0_0; }

		//("throws" exception=[types::JvmDeclaredType|QualifiedName])?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"throws"
		public Keyword getThrowsKeyword_2_1_1_1_0() { return cThrowsKeyword_2_1_1_1_0; }

		//exception=[types::JvmDeclaredType|QualifiedName]
		public Assignment getExceptionAssignment_2_1_1_1_1() { return cExceptionAssignment_2_1_1_1_1; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getExceptionJvmDeclaredTypeCrossReference_2_1_1_1_1_0() { return cExceptionJvmDeclaredTypeCrossReference_2_1_1_1_1_0; }

		//QualifiedName
		public RuleCall getExceptionJvmDeclaredTypeQualifiedNameParserRuleCall_2_1_1_1_1_0_1() { return cExceptionJvmDeclaredTypeQualifiedNameParserRuleCall_2_1_1_1_1_0_1; }

		//name=STRING
		public Assignment getNameAssignment_2_1_1_2() { return cNameAssignment_2_1_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_1_2_0() { return cNameSTRINGTerminalRuleCall_2_1_1_2_0; }

		//body=XBlockExpression?
		public Assignment getBodyAssignment_2_1_1_3() { return cBodyAssignment_2_1_1_3; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_2_1_1_3_0() { return cBodyXBlockExpressionParserRuleCall_2_1_1_3_0; }

		//{ExampleGroup.annotationInfo=current} (preamble=("describe" | "context")
		//(targetType=[types::JvmDeclaredType|QualifiedName] | targetOperation=[types::JvmOperation|Method])? name=STRING? "{"
		//elements+=Member* "}")
		public Group getGroup_2_2() { return cGroup_2_2; }

		//{ExampleGroup.annotationInfo=current}
		public Action getExampleGroupAnnotationInfoAction_2_2_0() { return cExampleGroupAnnotationInfoAction_2_2_0; }

		//preamble=("describe" | "context") (targetType=[types::JvmDeclaredType|QualifiedName] |
		//targetOperation=[types::JvmOperation|Method])? name=STRING? "{" elements+=Member* "}"
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//preamble=("describe" | "context")
		public Assignment getPreambleAssignment_2_2_1_0() { return cPreambleAssignment_2_2_1_0; }

		//"describe" | "context"
		public Alternatives getPreambleAlternatives_2_2_1_0_0() { return cPreambleAlternatives_2_2_1_0_0; }

		//"describe"
		public Keyword getPreambleDescribeKeyword_2_2_1_0_0_0() { return cPreambleDescribeKeyword_2_2_1_0_0_0; }

		//"context"
		public Keyword getPreambleContextKeyword_2_2_1_0_0_1() { return cPreambleContextKeyword_2_2_1_0_0_1; }

		//(targetType=[types::JvmDeclaredType|QualifiedName] | targetOperation=[types::JvmOperation|Method])?
		public Alternatives getAlternatives_2_2_1_1() { return cAlternatives_2_2_1_1; }

		//targetType=[types::JvmDeclaredType|QualifiedName]
		public Assignment getTargetTypeAssignment_2_2_1_1_0() { return cTargetTypeAssignment_2_2_1_1_0; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getTargetTypeJvmDeclaredTypeCrossReference_2_2_1_1_0_0() { return cTargetTypeJvmDeclaredTypeCrossReference_2_2_1_1_0_0; }

		//QualifiedName
		public RuleCall getTargetTypeJvmDeclaredTypeQualifiedNameParserRuleCall_2_2_1_1_0_0_1() { return cTargetTypeJvmDeclaredTypeQualifiedNameParserRuleCall_2_2_1_1_0_0_1; }

		//targetOperation=[types::JvmOperation|Method]
		public Assignment getTargetOperationAssignment_2_2_1_1_1() { return cTargetOperationAssignment_2_2_1_1_1; }

		//[types::JvmOperation|Method]
		public CrossReference getTargetOperationJvmOperationCrossReference_2_2_1_1_1_0() { return cTargetOperationJvmOperationCrossReference_2_2_1_1_1_0; }

		//Method
		public RuleCall getTargetOperationJvmOperationMethodParserRuleCall_2_2_1_1_1_0_1() { return cTargetOperationJvmOperationMethodParserRuleCall_2_2_1_1_1_0_1; }

		//name=STRING?
		public Assignment getNameAssignment_2_2_1_2() { return cNameAssignment_2_2_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_2_1_2_0() { return cNameSTRINGTerminalRuleCall_2_2_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_2_1_3() { return cLeftCurlyBracketKeyword_2_2_1_3; }

		//elements+=Member*
		public Assignment getElementsAssignment_2_2_1_4() { return cElementsAssignment_2_2_1_4; }

		//Member
		public RuleCall getElementsMemberParserRuleCall_2_2_1_4_0() { return cElementsMemberParserRuleCall_2_2_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2_1_5() { return cRightCurlyBracketKeyword_2_2_1_5; }

		//{Function.annotationInfo=current} ("def" ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)*
		//">")? (=> (returnType=JvmTypeReference name=ValidID "(") | name=ValidID "(") (parameters+=Parameter (","
		//parameters+=Parameter)*)? ")" expression=XBlockExpression)
		public Group getGroup_2_3() { return cGroup_2_3; }

		//{Function.annotationInfo=current}
		public Action getFunctionAnnotationInfoAction_2_3_0() { return cFunctionAnnotationInfoAction_2_3_0; }

		//"def" ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? (=>
		//(returnType=JvmTypeReference name=ValidID "(") | name=ValidID "(") (parameters+=Parameter (","
		//parameters+=Parameter)*)? ")" expression=XBlockExpression
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"def"
		public Keyword getDefKeyword_2_3_1_0() { return cDefKeyword_2_3_1_0; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_2_3_1_1() { return cGroup_2_3_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2_3_1_1_0() { return cLessThanSignKeyword_2_3_1_1_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_3_1_1_1() { return cTypeParametersAssignment_2_3_1_1_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_3_1_1_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_3_1_1_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_3_1_1_2() { return cGroup_2_3_1_1_2; }

		//","
		public Keyword getCommaKeyword_2_3_1_1_2_0() { return cCommaKeyword_2_3_1_1_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_3_1_1_2_1() { return cTypeParametersAssignment_2_3_1_1_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_3_1_1_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_3_1_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3_1_1_3() { return cGreaterThanSignKeyword_2_3_1_1_3; }

		//=> (returnType=JvmTypeReference name=ValidID "(") | name=ValidID "("
		public Alternatives getAlternatives_2_3_1_2() { return cAlternatives_2_3_1_2; }

		//=> (returnType=JvmTypeReference name=ValidID "(")
		public Group getGroup_2_3_1_2_0() { return cGroup_2_3_1_2_0; }

		//returnType=JvmTypeReference name=ValidID "("
		public Group getGroup_2_3_1_2_0_0() { return cGroup_2_3_1_2_0_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_2_3_1_2_0_0_0() { return cReturnTypeAssignment_2_3_1_2_0_0_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_2_3_1_2_0_0_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_2_3_1_2_0_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_3_1_2_0_0_1() { return cNameAssignment_2_3_1_2_0_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_3_1_2_0_0_1_0() { return cNameValidIDParserRuleCall_2_3_1_2_0_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3_1_2_0_0_2() { return cLeftParenthesisKeyword_2_3_1_2_0_0_2; }

		//name=ValidID "("
		public Group getGroup_2_3_1_2_1() { return cGroup_2_3_1_2_1; }

		//name=ValidID
		public Assignment getNameAssignment_2_3_1_2_1_0() { return cNameAssignment_2_3_1_2_1_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_3_1_2_1_0_0() { return cNameValidIDParserRuleCall_2_3_1_2_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3_1_2_1_1() { return cLeftParenthesisKeyword_2_3_1_2_1_1; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_2_3_1_3() { return cGroup_2_3_1_3; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_3_1_3_0() { return cParametersAssignment_2_3_1_3_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_3_1_3_0_0() { return cParametersParameterParserRuleCall_2_3_1_3_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_2_3_1_3_1() { return cGroup_2_3_1_3_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_3_1_0() { return cCommaKeyword_2_3_1_3_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_3_1_3_1_1() { return cParametersAssignment_2_3_1_3_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_3_1_3_1_1_0() { return cParametersParameterParserRuleCall_2_3_1_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3_1_4() { return cRightParenthesisKeyword_2_3_1_4; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_2_3_1_5() { return cExpressionAssignment_2_3_1_5; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_3_1_5_0() { return cExpressionXBlockExpressionParserRuleCall_2_3_1_5_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cParameterTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cParameterTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	annotations+=XAnnotation* parameterType=JvmTypeReference name=ValidID;
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* parameterType=JvmTypeReference name=ValidID
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_1() { return cParameterTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}
	
	
	private SpecFileElements pSpecFile;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private ExampleGroupElements pExampleGroup;
	private MethodElements pMethod;
	private TypeNameElements pTypeName;
	private TypeRefElements pTypeRef;
	private MemberElements pMember;
	private ParameterElements pParameter;
	private TerminalRule tSTRING;
	
	private final GrammarProvider grammarProvider;

	private XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public SpecGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammarProvider = grammarProvider;
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//SpecFile:
	//	{SpecFile} ("package" packageName=QualifiedName)? imports+=Import* elements+=ExampleGroup*;
	public SpecFileElements getSpecFileAccess() {
		return (pSpecFile != null) ? pSpecFile : (pSpecFile = new SpecFileElements());
	}
	
	public ParserRule getSpecFileRule() {
		return getSpecFileAccess().getRule();
	}

	//Import returns xtend2::XtendImport:
	//	"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
	//	importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard);
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName "." "*";
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//ExampleGroup:
	//	{ExampleGroup} annotations+=XAnnotation* preamble="describe" targetType=[types::JvmDeclaredType|QualifiedName]?
	//	name=STRING? "{" elements+=Member* "}";
	public ExampleGroupElements getExampleGroupAccess() {
		return (pExampleGroup != null) ? pExampleGroup : (pExampleGroup = new ExampleGroupElements());
	}
	
	public ParserRule getExampleGroupRule() {
		return getExampleGroupAccess().getRule();
	}

	//Method:
	//	"#" ValidID ("(" (TypeName ("," TypeName)*)? ")")?;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//TypeName:
	//	ValidID ("<" TypeRef ("," TypeRef)* ">")? "[]"?;
	public TypeNameElements getTypeNameAccess() {
		return (pTypeName != null) ? pTypeName : (pTypeName = new TypeNameElements());
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//TypeRef:
	//	"?"? ("extends" | "super")? TypeName;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	////XCastedExpression returns xbase::XExpression:
	//
	////	XInfixOperation (=>({xbase::XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//
	////;
	//
	////
	//
	////XInfixOperation returns xbase::XExpression:
	//
	////	XMemberFeatureCall  (=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|ValidID]) rightOperand=XMemberFeatureCall)*
	//
	////;
	//
	//Member:
	//	{Member} annotations+=XAnnotation* ({Field.annotationInfo=current} (type=JvmTypeReference name=ValidID ("="
	//	right=XExpression)?) | {Example.annotationInfo=current} (preamble="it" ("throws"
	//	exception=[types::JvmDeclaredType|QualifiedName])? name=STRING body=XBlockExpression?) |
	//	{ExampleGroup.annotationInfo=current} (preamble=("describe" | "context")
	//	(targetType=[types::JvmDeclaredType|QualifiedName] | targetOperation=[types::JvmOperation|Method])? name=STRING? "{"
	//	elements+=Member* "}") | {Function.annotationInfo=current} ("def" ("<" typeParameters+=JvmTypeParameter (","
	//	typeParameters+=JvmTypeParameter)* ">")? (=> (returnType=JvmTypeReference name=ValidID "(") | name=ValidID "(")
	//	(parameters+=Parameter ("," parameters+=Parameter)*)? ")" expression=XBlockExpression));
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Parameter:
	//	annotations+=XAnnotation* parameterType=JvmTypeReference name=ValidID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	////XMemberFeatureCall returns xbase::XExpression:
	//
	////	XPrimaryExpression
	//
	////	(=>({xbase::XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//
	////	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} feature=[types::JvmIdentifiableElement|ValidID]) memberCallArguments+=XExpression
	//
	////	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//
	////		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//
	////		feature=[types::JvmIdentifiableElement|ValidID] (
	//
	////			=>explicitOperationCall?='(' 
	//
	////				(
	//
	////				    memberCallArguments+=XShortClosure
	//
	////				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//
	////				)? 
	//
	////			')')?
	//
	////			=>memberCallArguments+=XClosure?
	//
	////		)*;
	//
	////
	//
	////	
	//
	////XFeatureCall returns xbase::XFeatureCall:
	//
	////	{xbase::XFeatureCall}
	//
	////	(=> feature=[types::JvmIdentifiableElement|IdOrSuper]  featureCallArguments+=XExpression
	//
	////	|((declaringType=[types::JvmDeclaredType|StaticQualifier])?
	//
	////	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	//
	////	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	//
	////	(=>explicitOperationCall?='(' 
	//
	////		(
	//
	////		    featureCallArguments+=XShortClosure
	//
	////		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//
	////		)? 
	//
	////	')')?
	//
	////	=>featureCallArguments+=XClosure?));
	//
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XIntLiteral | XTypeLiteral |
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbaseWithAnnotations.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" => (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbaseWithAnnotations.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")" => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbaseWithAnnotations.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
