grammar org.jnario.spec.Spec with org.eclipse.xtext.xtend2.Xtend2

import "http://www.org/jnario/spec/Spec" 
import "http://www.eclipse.org/xtext/Xtend2" as xtend
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.org/jnario/Common"
 
SpecFile:
{SpecFile}
('package' package=QualifiedName)? 
	imports+=Import*
	xtendClass=ExampleGroup
;

ExampleGroup:  
	{ExampleGroup}
	annotations+=XAnnotation* 
	preamble=('describe') targetType=JvmTypeReference? name=STRING? '{'
       (members+=Member*)
'}'
;

Method:
	ID ('(' (TypeName (',' TypeName)*)? ')')?  
;

TypeName:
	ID ('<' TypeRef (',' TypeRef)* '>')? ('[]')?
;

TypeRef:
	('?')? ('extends' | 'super')?  TypeName
;

Member returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation* 
	(
		{Example.annotationInfo = current}
		((=>preamble=ID | =>preamble='-') 
			(=>'throws' exception=[types::JvmDeclaredType|QualifiedName])? 
				(=>name=STRING
					=>body=XBlockExpression?))	
	|	{ExampleGroup.annotationInfo = current}
			(preamble=('describe') targetType=JvmTypeReference? =>name=STRING? '{'
      		members+=Member*
      	'}')
    |	{Before.annotationInfo = current}
		('before' (beforeAll?='all')? =>name=(STRING | ID)?
			body=XBlockExpression?)
	|	{After.annotationInfo = current}
		('after' (afterAll?='all')? =>name=(STRING | ID)?
			body=XBlockExpression?)
    |	{ExampleGroup.annotationInfo = current}
			(preamble=('context') targetOperation=[types::JvmOperation|Method]? =>name=STRING? '{'
      		members+=Member*
      	'}')
	|	{ExampleTable.annotationInfo = current} 
		('def' =>name=ID? '{'
			('|' (columns+=ExampleColumn)*
			(rows += ExampleRow)*)?
      	'}') 
	|	{xtend::XtendField.annotationInfo = current}	
			visibility=Visibility?   
		 	(extension?='extension' type=JvmTypeReference name=ValidID?
			| static?='static'? type=JvmTypeReference name=ValidID)
			('=' initialValue=XExpression)?
		
	|	{xtend::XtendFunction.annotationInfo = current}
			('def' | override?='override') visibility=Visibility? static?='static'? (dispatch?='dispatch'?) 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			( =>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			| =>(returnType=JvmTypeReference name=ValidID '(')
			| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			| name=ValidID '('
			)
			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			(=>'throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			(expression=XBlockExpression | expression=RichString )?
	 );

XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	Assertion |
	Matcher;


Assertion returns xbase::XExpression: 
	{Assertion}
	'assert' expression=XExpression;


Matcher:
	'#' closure=MatcherClosure
;

MatcherClosure returns xbase::XExpression:
	{xbase::XClosure} 
	'[' 
		=>(declaredFormalParameters+=JvmFormalParameter explicitSyntax?='|')? 
		expression=XExpressionInClosure 
	']';


ExampleColumn: 
	type=JvmTypeReference? name=ValidID '|';

ExampleRow: 
	'|' {ExampleRow} (cells+=XExpression '|')*
;

//terminal EXAMPLE:
//	'\n' WS* 'it' WS !('\n'|'{')*
//;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

