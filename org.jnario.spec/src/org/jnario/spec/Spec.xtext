grammar org.jnario.spec.Spec with org.eclipse.xtend.core.Xtend

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.org/jnario/spec/Spec" 
import "http://www.eclipse.org/xtend" as xtend
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.org/Jnario"
 
SpecFile:
{SpecFile}
('package' package=QualifiedName)? 
	imports+=Import*
	xtendClass=ExampleGroup
;

ExampleGroup:  
	{ExampleGroup}
	annotations+=XAnnotation* 
	preamble=('describe') targetType=JvmTypeReference? name=STRING? '{'
       (members+=Member*)
'}'
;

Method:
	ID ('(' (TypeName (',' TypeName)*)? ')')?  
;

TypeName:
	ID ('<' TypeRef (',' TypeRef)* '>')? ('[]')?
;

TypeRef:
	('?')? ('extends' | 'super')?  TypeName
;

Member returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation* 
	(
		{Example.annotationInfo = current}
		(
			(preamble=ID | =>preamble='-') 
				(((	
					(=>'throws' exception=[types::JvmDeclaredType|QualifiedName] name=STRING?) |
			 		 name=STRING
			 	) 
			 	body=ExampleContent?) | body=ExampleContent)
		)	
	|	{ExampleGroup.annotationInfo = current}
			(=>preamble=('describe') targetType=JvmTypeReference? =>name=STRING? '{'
      		members+=Member*
      	'}')
    |	{Before.annotationInfo = current}
		(=>'before' (beforeAll?='all')? =>name=(STRING | ID)?
			body=XBlockExpression?)
	|	{After.annotationInfo = current}
		(=>'after' (afterAll?='all')? =>name=(STRING | ID)?
			body=XBlockExpression?)
    |	{ExampleGroup.annotationInfo = current}
			(=>preamble=('context') targetOperation=[types::JvmOperation|Method]? =>name=STRING? '{'
      		members+=Member*
      	'}')
	|	{ExampleTable.annotationInfo = current} 
		(=>'def' =>name=ID? '{'
			('|' (columns+=ExampleColumn)*
			(rows += ExampleRow)*)?
      	'}') 
	|	{xtend::XtendField.annotationInfo = current}	
			visibility=Visibility?   
		 	(extension?='extension' type=JvmTypeReference name=ValidID?
			| static?='static'? type=JvmTypeReference name=ValidID)
			('=' initialValue=XExpression ';'?)?
		
	|	{xtend::XtendFunction.annotationInfo = current}
			('def' | override?='override') visibility=Visibility? static?='static'? (dispatch?='dispatch'?) 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			( =>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			| =>(returnType=JvmTypeReference name=ValidID '(')
			| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			| name=ValidID '('
			)
			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			(=>'throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			(expression=XBlockExpression | expression=RichString )?
	 );
	 
ExampleContent returns xbase::XExpression:
	SingleLineBlock | XBlockExpression
;
	 
SingleLineBlock returns xbase::XBlockExpression:
	'[' {xbase::XBlockExpression} expressions+=XExpressionInsideBlock ']'
;

XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	Assertion |
	Matcher;

XRelationalExpression returns xbase::XExpression:
	XOtherOperatorExpression
	( 
	 =>({Should.leftOperand=current} 
	 		(prefix=('should'|'must') not?='not'? postfix='be'? | 
	 		prefix='=>')
	 		) rightOperand=XOtherOperatorExpression |
	 =>({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	 =>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;

Assertion returns xbase::XExpression: 
	{Assertion}
	'assert' expression=XExpression;

Should

ShouldBe:
	
;

Matcher:
	'#' closure=MatcherClosure
;

MatcherClosure returns xbase::XExpression:
	{xbase::XClosure} 
	'[' 
		=>(declaredFormalParameters+=JvmFormalParameter explicitSyntax?='|')? 
		expression=XExpressionInClosure 
	']';


ExampleColumn: 
	type=JvmTypeReference? name=ValidID '|';

ExampleRow: 
	'|' {ExampleRow} (cells+=XExpression '|')*
;

//terminal RICH_TEXT : "'''" IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF);
//terminal RICH_TEXT_START : "'''" IN_RICH_STRING* ("'" "'"?)? 'л';
//terminal RICH_TEXT_END : '╗' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF) ;
//terminal RICH_TEXT_INBETWEEN : '╗' IN_RICH_STRING* ("'" "'"?)? 'л';
//terminal COMMENT_RICH_TEXT_INBETWEEN: "лл" !('\n'|'\r')* ('\r'? '\n' IN_RICH_STRING* ("'" "'"?)? 'л')?; 
//terminal COMMENT_RICH_TEXT_END: "лл" !('\n'|'\r')* (('\r'? '\n' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF)) | EOF); 
//
//terminal fragment IN_RICH_STRING : 
//	  "''" !('л'|"'") 
//	| "'" !('л'|"'")
//	| !('л'|"'");
//	
//	
//terminal HEX:
//	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ 
//	('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
//	
//terminal INT returns ecore::EInt:
//	'0'..'9' ('0'..'9'|'_')*; 
//
//terminal DECIMAL:
//	INT 
//	(('e'|'E') ('+'|'-')? INT)? 
//	(('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
//
//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//terminal STRING	: 
//			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
//			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
//		; 
//terminal ML_COMMENT	: '/*' -> '*/';
//terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
//
//terminal WS			: (' '|'\t'|'\r'|'\n')+;
//
//terminal ANY_OTHER: .;

