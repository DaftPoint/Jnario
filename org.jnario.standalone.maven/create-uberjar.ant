<project default="run">
	<!--
	 1. Where to get eclipse bundles  = eclipsePluginFolder
	 2. Where to get xtext bundles  = xtextPluginFolder
	 3. standalone jar Version to use = maven.version
	 3. Where to put output = output.folder
	-->
	<property name="jnarioPluginFolder" value="../org.jnario.updatesite/target/repository/plugins" />
	<property name="maven.version" value="0.1.0" />
	<property name="output.folder" value="result" />
	<echo>${maven.version}</echo>

	<property name="binJarTemp" value="binJarTemp" />
	<property name="sourceJarTemp" value="sourceJarTemp" />

	<target name="run" depends="clean,createSourcesUberjar">
	
		<loadfile property="modifiedPomXml" srcFile="pom-template.pom">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<echo file="${output.folder}/org.jnario.standalone.maven-${maven.version}.pom">${modifiedPomXml}</echo>
		<echo>Pom stored: ${output.folder}/org.jnario.standalone.maven-${maven.version}.pom</echo>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete failonerror="false">
			<fileset dir="${output.folder}">
				<include name="**" />
			</fileset>
			<fileset dir="${binJarTemp}">
				<include name="**" />
			</fileset>
			<fileset dir="${sourceJarTemp}">
				<include name="**" />
			</fileset>
		</delete>
	</target>

	<!-- ================================= 
          target: createUberjar    Binary           
         ================================= -->
	<target name="createUberjar">
		<mkdir dir="${output.folder}" failonerror="false"/>
		<mkdir dir="${binJarTemp}" failonerror="false"/>
		<mkdir dir="${sourceJarTemp}" failonerror="false"/>
		<!-- Jnario bundles -->
		<fileset dir="${jnarioPluginFolder}" id="binJnarioJars">
			<include name="org.jnario_*.jar" />
			<include name="org.jnario.spec_*.jar" />
			<include name="org.jnario.suite_*.jar" />
			<include name="org.jnario.feature_*.jar" />
			<include name="org.jnario.lib_*.jar" />
			<include name="org.jnario.standalone_*.jar" />
		</fileset>

		<unzip dest="${binJarTemp}">
			<fileset refid="binJnarioJars" />
		</unzip>

		<antcall target="cleanUpContent">
			<param name="contentDir" value="${binJarTemp}" />
		</antcall>

		<!-- Jar uber jar -->
		<jar destfile="${output.folder}/org.jnario.standalone.maven-${maven.version}.jar" basedir="${binJarTemp}" />
	</target>


	<!-- ================================= 
	          target: createSourcesUberjar     Sources   
	         ================================= -->
	<target name="createSourcesUberjar" depends="createUberjar">


		<!-- Jnario bundles -->
		<fileset dir="${jnarioPluginFolder}" id="sourceXtextJars">
			<include name="org.jnario.source*.jar" />
			<include name="org.jnario.feature.source*.jar" />
			<include name="org.jnario.suite.source*.jar" />
			<include name="org.jnario.spec.source*.jar" />
			<include name="org.jnario.lib.source*.jar" />
			<include name="org.jnario.standalone.source*.jar" />
		</fileset>

		<unzip dest="${sourceJarTemp}" overwrite="true">
			<fileset refid="sourceXtextJars" />
			<fileset dir="${jnarioPluginFolder}">
				<include name="org.jnario.standalone.source_0.1.0*.jar" />
			</fileset>
		</unzip>

		<antcall target="cleanUpContent">
			<param name="contentDir" value="${sourceJarTemp}" />
		</antcall>

		<!-- Jar uber jar -->
		<jar destfile="${output.folder}/org.jnario.standalone.maven-${maven.version}-sources.jar" basedir="${sourceJarTemp}">
			<exclude name="META-INF/*" />
		</jar>
	</target>

	<!-- clean up equinox stuff, ecore file and some other -->
	<target name="cleanUpContent">
		<delete>
			<fileset dir="${contentDir}">
				<include name="about*" />
				<include name=".*" />
				<include name="plugin.*" />
				<include name="modeling32.png" />
				<include name="**/*.ecore" />
				<include name="META-INF/**" />
			</fileset>
		</delete>
		<delete dir="${contentDir}/about_files"/>
	</target>

</project>