grammar de.bmw.carit.jnario.Jnario with org.eclipse.xtext.xtend2.Xtend2
generate jnario "http://www.bmw.de/carit/jnario/Jnario"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/Xtend2" as xtend
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Jnario returns xtend::XtendFile:
	{Jnario}
	('package' package=QualifiedName)?
	imports += Import*
	(xtendClass = Feature)?
;

Feature returns xtend::XtendClass:
	{Feature}
	name=FEATURE_TEXT
	description=DESCRIPTION?
	background = Background?
	members+=Scenario*;
	
DESCRIPTION:
	IN_ORDER_TEXT
	AS_A_TEXT
	I_WANT_TEXT
;

Import returns xtend::XtendImport:
	'import' (
		(static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*') | 
		importedType=[types::JvmType|QualifiedName] | 
		importedNamespace=QualifiedNameWithWildCard
	); 

QualifiedNameWithWildCard :
	QualifiedName  '.' '*';

Background:
	BACKGROUND_TEXT
	steps+=Given;

Scenario returns xtend::XtendMember:
	{Scenario}
	name=SCENARIO_TEXT
	members+=Member*
	steps+=Given?
	steps+=When?
	steps+=Then?
	examples+=ExampleTable*;

Annotation:
	annotation=XAnnotation
	var = VariableDeclaration?;

VariableDeclaration:
	visibility=Visibility variableDec=XVariableDeclaration; 

Step returns xtend::XtendMember:
	Given|When|Then|And;

Given returns xtend::XtendMember:
	{Given}
	name=GIVEN_TEXT code=Code?
	and+=And*;

When returns xtend::XtendMember:
	{When}
	name=WHEN_TEXT code=Code?
	and+=And*;

Then returns xtend::XtendMember:
	{Then}
	name=THEN_TEXT code=Code? 
	and+=And*;
	
And returns xtend::XtendMember:
	{And}
	name=AND_TEXT code=Code?
;

Code:
	annotations+=XAnnotation* 
	blockExpression=BlockExpression;

BlockExpression returns xbase::XBlockExpression:
	(expressions+=XExpressionInsideBlock ';'?)+;

ExampleTable:
	name=EXAMPLE_TEXT
	heading = ExampleHeading
	(rows += ExampleRow)*;

ExampleHeading:
	parts+=ExampleHeadingCell+ EXAMPLE_ROW_END;
 
ExampleHeadingCell returns xtend::XtendField:
	(PIPE | PIPE_SPACES) name=ValidID ;

ExampleRow:
	parts+=ExampleCell+ EXAMPLE_ROW_END;

ExampleCell:
	(PIPE | PIPE_SPACES) name=XExpression;

//XMemberFeatureCall returns xbase::XExpression:
//	XPrimaryExpression
//	(=>({xbase::XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
//	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} feature=[types::JvmIdentifiableElement|ValidID]) memberCallArguments+=XExpression
//	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
//		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
//		feature=[types::JvmIdentifiableElement|ValidID] (
//			=>explicitOperationCall?='(' 
//				(
//				    memberCallArguments+=XShortClosure
//				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
//				)? 
//			')')?
//			=>memberCallArguments+=XClosure?
//		)*;
//
//	
//XFeatureCall returns xbase::XExpression:
//	{xbase::XFeatureCall}
//	(=> feature=[types::JvmIdentifiableElement|IdOrSuper]  featureCallArguments+=XExpression
//	|((declaringType=[types::JvmDeclaredType|StaticQualifier])?
//	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
//	feature=[types::JvmIdentifiableElement|IdOrSuper] 
//	(=>explicitOperationCall?='(' 
//		(
//		    featureCallArguments+=XShortClosure
//		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
//		)? 
//	')')?
//	=>featureCallArguments+=XClosure?));


terminal FEATURE_TEXT: 'Feature' COLON MNL;
terminal BACKGROUND_TEXT: 'Background' COLON MNL;
terminal SCENARIO_TEXT: 'Scenario' COLON MNL;
terminal GIVEN_TEXT: 'Given ' MNL;
terminal WHEN_TEXT: 'When ' MNL;
terminal THEN_TEXT: 'Then ' MNL;
terminal AND_TEXT: 'And ' MNL;
terminal EXAMPLE_TEXT: 'Examples' COLON MNL;

terminal IN_ORDER_TEXT: 'In order to' TEXT_AND_NL;
terminal AS_A_TEXT: 'As a' TEXT_AND_NL;
terminal I_WANT_TEXT: 'I want' TEXT_AND_NL;


terminal PIPE : '|';
terminal PIPE_SPACES: PIPE (' '|'\t')+;
terminal EXAMPLE_ROW_END: (PIPE | PIPE_SPACES) '\r'? '\n';


terminal fragment TEXT_MULTI_LINE: !('\r'|'\n')* '\\' NL;
terminal fragment TEXT_AND_NL: !('\r'|'\n'|'\\')* NL;
terminal fragment MNL: (TEXT_MULTI_LINE)* TEXT_AND_NL;
terminal fragment COLON: SPACES ':';
terminal fragment NL: '\r'? '\n'?;
terminal fragment SPACES: (' '|'\t')*;