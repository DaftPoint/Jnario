/*
 * generated by Xtext
 */
package de.bmw.carit.jnario.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.google.common.collect.Iterators

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.xbase.compiler.*
import org.eclipse.xtext.xbase.*
import de.bmw.carit.jnario.jnario.*
import org.eclipse.xtext.common.types.*
import java.util.*
import com.google.inject.Inject
import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*
import org.eclipse.xtext.xtend2.lib.StringConcatenation

class JnarioGenerator implements IGenerator {
	
	@Inject JnarioCompiler jnarioCompiler
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		for(feature: resource.allContentsIterable.filter(typeof(Jnario))) {			
			var className = feature.name
			className = className.replaceAll("[^A-Za-z0-9_]","");
			fsa.generateFile(className + ".java", feature.compile(className))
		}
	}
	
	def compile(Jnario feature, String className){
		
		val importManager = new ImportManager(true)
		var testClassContent = ""
		for(Scenario scenario:feature.scenarios){
			testClassContent = testClassContent + jnarioCompiler.compile(scenario, importManager)
		}
		'''
		import org.junit.Test;
		
		«FOR i:importManager.imports»
			import «i»;
		«ENDFOR»
		public class «className»{
			«testClassContent»
		}
		'''
	}
}
