/*******************************************************************************
 * Copyright (c) 2012 BMW Car IT and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
/*
 * generated by Xtext
 */
package org.jnario.feature.ui.contentassist;

import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.jnario.feature.feature.FeaturePackage;
import org.jnario.feature.feature.Step;
import org.jnario.feature.feature.StepReference;

import com.google.common.collect.Iterators;

/**
 * @author Birgit Engelmann - Initial contribution and API
 */
public class FeatureProposalProvider extends AbstractFeatureProposalProvider {
	
	
	@Override
	public void completeAndReference_Reference(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeStepReference(model, context, acceptor, "And");
		super.completeAndReference_Reference(model, assignment, context, acceptor);
	}
	
	@Override
	public void completeGivenReference_Reference(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeStepReference(model, context, acceptor, "Given");
		super.completeGivenReference_Reference(model, assignment, context, acceptor);
	}
	
	@Override
	public void completeWhenReference_Reference(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeStepReference(model, context, acceptor, "When");
		super.completeWhenReference_Reference(model, assignment, context, acceptor);
	}
	
	@Override
	public void completeThenReference_Reference(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeStepReference(model, context, acceptor, "Then");
		super.completeThenReference_Reference(model, assignment, context, acceptor);
	}

	private void completeStepReference(EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor,
			String stepPrefix) {
		TreeIterator<EObject> allContents = model.eResource().getAllContents();
		Iterator<Step> steps = Iterators.filter(allContents, Step.class);
		while (steps.hasNext()) {
			Step step = (Step) steps.next();
			if (step instanceof StepReference) {
				StepReference ref = (StepReference) step;
					if(ref.getReference().eIsProxy()){
					List<INode> nodes = NodeModelUtils.findNodesForFeature(ref, FeaturePackage.Literals.STEP_REFERENCE__REFERENCE);
					StringBuilder sb = new StringBuilder();
					for (INode node : nodes) {
						sb.append(node.getText());
					}
					String string = sb.toString();
					String proposal = string.substring(string.indexOf(" "));
					proposal = stepPrefix + proposal;
					acceptor.accept(createCompletionProposal(proposal.trim() , context));
				}
				
			}
		}
	}

	@Override
	public void complete_FEATURE_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Feature: ", context));
	}
	
	@Override
	public void complete_BACKGROUND_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Background: ", context));
	}
	
	@Override
	public void complete_SCENARIO_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Scenario: ", context));
	}
	
	@Override
	public void complete_GIVEN_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Given ", context));
	}
	
	@Override
	public void complete_WHEN_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("When ", context));
	}
	
	@Override
	public void complete_THEN_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Then ", context));
	}
	
	@Override
	public void complete_EXAMPLE_TEXT(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("Examples: ", context));
	}
	
	@Override
	protected void lookupCrossReference(CrossReference crossReference, ContentAssistContext contentAssistContext,
			ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(crossReference, contentAssistContext, acceptor, getFeatureDescriptionPredicate(contentAssistContext));
	}
	
	protected StyledString getStyledDisplayString(EObject element, String qualifiedName, String shortName) {
		if(element instanceof Step){
			
		}
		return new StyledString(getDisplayString(element, qualifiedName, shortName));
	}
	
}
