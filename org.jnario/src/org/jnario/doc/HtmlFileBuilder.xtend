package org.jnario.doc

import java.util.List
import org.eclipse.xtend.core.xtend.XtendClass
import org.eclipse.xtend.core.xtend.XtendFile
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.generator.IFileSystemAccess

import static org.jnario.util.Strings.*

class HtmlFileBuilder {
	
	List<String> cssFiles = newArrayList("bootstrap.min.css", "bootstrap-responsive.min.css", "custom.css", "prettify.css")
	List<String> jsFiles = newArrayList("prettify.js", "lang-jnario.js")
	
	def generate(XtendClass context, IFileSystemAccess fsa, HtmlFile htmlFile){
		fsa.copy("css", cssFiles)
		fsa.copy("js", jsFiles)
		
		val content = generateContent(context, htmlFile)
		fsa.generateFile(filePath(context, htmlFile), DocOutputConfigurationProvider::DOC_OUTPUT, content)
	}
	
	def generateContent(XtendClass context, HtmlFile htmlFile)	'''
		<!DOCTYPE html>
		<html lang="en">
		<head>
		<meta charset="utf-8">
		<title>«htmlFile.title»</title>
		<meta name="description" content="">
		<meta name="author" content="Jnario">

		<!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
		<!--[if lt IE 9]>
		      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		    <![endif]-->

		<!-- Le styles -->
		«FOR cssFile : cssFiles»
		<link rel="stylesheet" href="«folder("css", context)»/«cssFile»">
		«ENDFOR»
		«FOR jsFile : jsFiles»
		<script type="text/javascript" src="«folder("js", context)»/«jsFile»"></script>
		«ENDFOR»
		</head>
		
		<body onload="prettyPrint()">
			<div class="container">
				<div class="content">
					<div class="page-header">
						<h1>«htmlFile.title»</h1>
					</div>
					<div class="row">
						<div class="span12">
		«htmlFile.content»
						</div>
					</div>
				</div> <!-- /content -->
				<footer>
					<p><small>Generated by <a href="http://www.jnario.org">Jnario</a>.</small></p>
				</footer>
		
			</div>
			<!-- /container -->
		
		</body>
		</html>
	'''
	
	def private filePath(XtendClass xtendClass, HtmlFile htmlFile){
		val fileName = "/" + htmlFile.fileName + ".html"
		if(xtendClass.packageName == null){
			return fileName
		}
		return "/" + xtendClass.packageName.replaceAll("\\.", "/") + fileName
	}
	
	def private copy(IFileSystemAccess fsa, String targetFolder, Iterable<String> files){
		for(file : files){
			fsa.generateFile("/" + targetFolder + "/" + file, DocOutputConfigurationProvider::DOC_OUTPUT, load(file)) 
		}
	}
	
	def private load(String file){
		val inputStream = typeof(DocumentationSupport).getResourceAsStream(file)
		return convertStreamToString(inputStream)
	}	
	
	def private folder(String name, XtendClass context){
		return root(context) + name
	}
	
	def private root(XtendClass xtendClass){
		val specFile = EcoreUtil2::getContainerOfType(xtendClass, typeof(XtendFile))
		val packageName= specFile.xtendClass.packageName
		if(packageName == null){
			return ""
		}
		val fragments = packageName.split("\\.")
		val path = fragments.map(String s | "../")
		return path.join("")
	}
	
}